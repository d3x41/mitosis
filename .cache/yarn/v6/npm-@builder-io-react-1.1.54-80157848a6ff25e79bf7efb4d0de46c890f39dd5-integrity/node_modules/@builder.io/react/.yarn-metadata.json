{
  "manifest": {
    "name": "@builder.io/react",
    "version": "1.1.54",
    "description": "## Integration",
    "keywords": [],
    "main": "dist/builder-react.cjs.js",
    "unpkg": "dist/builder-react.unpkg.js",
    "module": "dist/builder-react.es5.js",
    "typings": "dist/types/src/builder-react.d.ts",
    "author": {
      "name": "Steve Sewell",
      "email": "steve@builder.io"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/BuilderIO/builder"
    },
    "license": "MIT",
    "engines": {
      "node": ">=6.0.0"
    },
    "tags": [
      "react",
      "builder.io"
    ],
    "scripts": {
      "_unlink": "npm unlink *",
      "_install": "npm install --legacy-peer-deps",
      "docs": "typedoc",
      "lint": "tslint -t codeFrame '../**/*.ts' 'test/**/*.ts'",
      "prebuild": "rimraf dist",
      "build": "NODE_ENV=production tsc --module commonjs && rollup -c rollup.config.ts",
      "build:docs": "typedoc --out docs --target es6 --theme minimal --mode file src",
      "start": "rollup -c rollup.config.ts -w",
      "test": "jest",
      "test:watch": "jest --watch",
      "test:prod": "npm run lint && npm run test -- --coverage --no-cache",
      "deploy-docs": "ts-node tools/gh-pages-publish",
      "report-coverage": "cat ./coverage/lcov.infoâ‰ˆ | coveralls",
      "commit": "git-cz",
      "release": "npm run build && ALLOW_PUBLISH=true npm publish --tag backport-v1.x",
      "precommit": "lint-staged",
      "ci:test": "npm run test",
      "ci:build": "npm run build"
    },
    "lint-staged": {
      "**/*.{js,jsx,ts,tsx,md,json}": [
        "prettier --write",
        "git add"
      ]
    },
    "config": {
      "commitizen": {
        "path": "node_modules/cz-conventional-changelog"
      },
      "validate-commit-msg": {
        "types": "conventional-commit-types",
        "helpMessage": "Use \"npm run commit\" instead, we use conventional-changelog format :) (https://github.com/commitizen/cz-cli)"
      }
    },
    "jest": {
      "transform": {
        ".(ts|tsx|jsx)": "ts-jest"
      },
      "testRegex": "(/__tests__/.*|\\.(test|spec))\\.(ts|tsx)$",
      "moduleFileExtensions": [
        "ts",
        "tsx",
        "js"
      ],
      "testURL": "http://localhost/",
      "coveragePathIgnorePatterns": [
        "/node_modules/",
        "/test/"
      ],
      "moduleDirectories": [
        "<rootDir>/node_modules"
      ],
      "coverageThreshold": {
        "global": {
          "branches": 25,
          "functions": 25,
          "lines": 25,
          "statements": 25
        }
      },
      "collectCoverage": true
    },
    "devDependencies": {
      "@builder.io/block-publish": "^1.1.2",
      "@testing-library/jest-dom": "^4.0.0",
      "@testing-library/react": "^9.1.0",
      "@types/hash-sum": "^1.0.0",
      "@types/jest": "^22.2.3",
      "@types/node": "^10.17.13",
      "@types/object-hash": "^1.3.0",
      "@types/react": "^16.4.1",
      "@types/react-dom": "^16.0.7",
      "@types/react-test-renderer": "^16.9.2",
      "@types/rollup-plugin-commonjs": "^9.2.0",
      "@types/rollup-plugin-json": "^3.0.1",
      "@types/rollup-plugin-node-resolve": "^4.1.0",
      "@types/rollup-plugin-sourcemaps": "^0.4.0",
      "colors": "^1.1.2",
      "commitizen": "^4.2.4",
      "coveralls": "^3.0.0",
      "cross-env": "^5.0.1",
      "cz-conventional-changelog": "^2.0.0",
      "husky": "^0.14.0",
      "jest": "^25.5.4",
      "lint-staged": "^7.0.0",
      "prettier": "^1.4.4",
      "prompt": "^1.0.0",
      "react-test-renderer": "^16.13 || ^17.0.1",
      "replace-in-file": "^3.0.0-beta.2",
      "rimraf": "^2.6.1",
      "rollup": "^2.38.5",
      "rollup-plugin-alias": "^1.5.1",
      "rollup-plugin-babel-minify": "^9.1.1",
      "rollup-plugin-commonjs": "^9.0.0",
      "rollup-plugin-json": "^3.0.0",
      "rollup-plugin-node-resolve": "^3.0.0",
      "rollup-plugin-re": "^1.0.7",
      "rollup-plugin-replace": "^2.0.0",
      "rollup-plugin-sourcemaps": "^0.4.2",
      "rollup-plugin-terser": "^5.3.1",
      "rollup-plugin-typescript2": "^0.30.0",
      "semantic-release": "^17.4.2",
      "ts-jest": "^25.5.1",
      "ts-node": "^6.0.0",
      "tslint": "^5.8.0",
      "tslint-config-prettier": "^1.1.0",
      "tslint-config-standard": "^7.0.0",
      "typedoc": "^0.22.15",
      "typedoc-plugin-markdown": "^3.12.1",
      "typescript": "^4.6.4",
      "validate-commit-msg": "^2.12.2"
    },
    "//": "TODO: maybe make @builder.io/sdk peerdependency",
    "optionalDependencies": {
      "create-react-context": "^0.2.3",
      "node-fetch": "^2.3.0",
      "prop-types": "^15.7.2"
    },
    "dependencies": {
      "@builder.io/sdk": "^1.3.1",
      "@emotion/core": "^10.0.17",
      "hash-sum": "^2.0.0",
      "preact": "^10.1.0",
      "react": ">=14",
      "react-dom": ">=14",
      "tslib": "^2.4.0",
      "vm2": "^3.6.4"
    },
    "gitHead": "4d96fbc32864698afbb355ab991c6d90be991951",
    "_registry": "npm",
    "_loc": "/home/user/.cache/yarn/v6/npm-@builder-io-react-1.1.54-80157848a6ff25e79bf7efb4d0de46c890f39dd5-integrity/node_modules/@builder.io/react/package.json",
    "readmeFilename": "README.md",
    "readme": "# Builder.io React SDK\n\n## Integration\n\nSee our full [getting started docs](https://www.builder.io/c/docs/developers), or jump right into integration. We generally recommend to start with page buliding as your initial integration:\n\n<table>\n  <tr>\n    <td align=\"center\">Integrate Page Building</td>\n    <td align=\"center\">Integrate Section Building</td>\n  </tr>\n  <tr>\n    <td align=\"center\">\n      <a href=\"https://www.builder.io/c/docs/integrating-builder-pages\">\n        <img alt=\"CTA to integrate page buliding\" src=\"https://cdn.builder.io/api/v1/image/assets%2FYJIGb4i01jvw0SRdL5Bt%2F48bbb0ef5efb4d19a95a3f09f83c98f0\" />\n      </a>\n    </td>\n    <td align=\"center\">\n      <a href=\"https://www.builder.io/c/docs/integrate-section-building\">\n        <img alt=\"CTA to integrate section buliding\" src=\"https://cdn.builder.io/api/v1/image/assets%2FYJIGb4i01jvw0SRdL5Bt%2F9db93cd1a29443fca7b67c1f9f458356\" />\n      </a>\n    </td>    \n  </tr>\n</table>\n\n## React API\n\n### Simple example\n\nThe gist of using Builder, is fetching content (using queries on [custom fields](https://www.builder.io/c/docs/custom-fields) and [targeting](https://www.builder.io/c/docs/targeting-with-builder). Builder is structured like a traditional headless CMS where you can have different content types, called [models](https://www.builder.io/c/docs/guides/getting-started-with-models). By default, every Builder space has a `\"page\"` model.\n\n```tsx\nimport { builder } from '@builder.io/react'\n\nconst API_KEY = '...' // Your Builder public API key\nconst MODEL_NAME = 'page';\n\nconst content = await builder\n  .get(MODEL_NAME, {\n    // Optional custom query\n    query: {\n      'data.customField.$gt': 100,\n    },\n    // Optional custom targeting\n    userAttributes: {\n      urlPath: '/' // Most Builder content is targeted at least by the URL path\n    }\n  })\n  .promise()\n  \n// Later, pass the fetched content to the BuilderComponent\n<BuilderComponent model={MODEL_NAME} content={content} />\n```\n\nThe builder content is simply json that you pass to a `<BuilderComponent />` to render. [Learn more about it here](https://www.builder.io/c/docs/how-builder-works-technical)\n\nYou can view all of the options for `builder.get` for fetching content [in our full reference here](../core/docs/interfaces/GetContentOptions.md)\n\nFor example, with Next.js, to render Builder as your homepage:\n\n```tsx\nexport const getStaticProps = async () => {\n  return {\n    props: {\n      builderContent: await builder.get('page', {\n        userAttributes: {\n          urlPath: '/' // Fetch content targeted to the homepage (\"/\" url)\n        }\n      }).promise()\n    }\n  }\n}\n\nexport default function MyHomePage({ builderContent }) {\n  return <>\n    <YourHeader />\n    <BuilderComponent model=\"page\" content={builderContent} />\n    <YourFooter />\n  </>\n}\n```\n\nYou can also allow dynamic page building (the ability to create new pages on new URLs dynamically). E.g. see [this guide](https://www.builder.io/c/docs/integrating-builder-pages) on how to do that\n\n### Registering Components\n\nOne of Builder's most powerful features is registering your own components for use in the drag and drop editor. \nYou can choose to have these compliment the built-in components, or to be the only components allowed to be used\n(e.g. via [components-only mode](https://www.builder.io/c/docs/guides/components-only-mode))\n\n```tsx\nimport { Builder } from '@builder.io/sdk-react';\n\nfunction MyHero(props) { /* Your own hero component in your codebase */ }\n\nBuilder.registerComponent(MyHero, {\n  name: 'Hero',\n  inputs: [\n    { name: 'title', type: 'string' } // Gets passed as the `title` prop to the Hero\n  ]\n})\n```\n\nLearn more about [registering components in Builder](https://www.builder.io/c/docs/custom-react-components)\n\n### BuilderComponent\n\nYou can find the full [reference docs for the BuilderComponent props here](docs/interfaces/builder_component_component.BuilderComponentProps.md)\n\n```tsx\nconst MODEL_NAME = 'page';\n\n// Render \n<BuilderComponent model={MODEL_NAME} content={builderJson} />\n```\n\nSee our guides for [Gatsby](https://github.com/BuilderIO/builder/tree/master/examples/gatsby) and [Next.js](https://github.com/BuilderIO/builder/tree/master/examples/next-js) for guides on using with those frameworks\n\n\n#### Passing data and functions down\n\nYou can also pass [data](https://www.builder.io/c/docs/guides/connecting-api-data) and [functions](https://www.builder.io/c/docs/react/custom-actions) down to the Builder component to use in the UIs (e.g. bind\ndata values to UIs e.g. for text values or iterating over lists, and actions to trigger for instance on click of a button)\n\nAll data passed down is available in Builder [actions and bindings](https://www.builder.io/c/docs/guides/custom-code) as `state.*`, for instance in the below example `state.products`, etc will be available\n\n```tsx\n<BuilderComponent\n  model=\"page\"\n  data={{\n    products: productsList,\n    foo: 'bar'\n  }} \n  content={builderJson} />\n```\n\nYou can also pass down functions, complex data like custom objects and libraries you can use `context`. Similar to React context, context passes all the way down (e.g. through symbols, etc). This data is not observed for changes and mutations\n\n```tsx\n<BuilderComponent\n  model=\"page\"\n  context={{\n    addToCart: () => myService.addToCart(currentProduct),\n    lodash: lodash,\n  }} \n  content={builderJson} />\n```\n\nContext is available in [actions and bindings](https://www.builder.io/c/docs/guides/custom-code) as `context.*`, such as `context.lodash` or `context.myFunction()` in the example above\n\n#### Passing complex data\n\nEverything passed down is available on the `state` object in data and actions - e.g. `state.products[0].name`\n\nSee more about using data passed down [here](https://www.builder.io/c/docs/react/custom-actions)\n\n### Builder\n\nThe global `Builder` singleton has a number of uses. Most important is registering custom components.\n\n```tsx\nimport * as React from 'react';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { Builder } from '@builder.io/react';\n\nclass CodeBlockComponent extends React.Component {\n  render() {\n    return <SyntaxHighlighter language={this.props.language}>{this.props.code}</SyntaxHighlighter>;\n  }\n}\n\nBuilder.registerComponent(CodeBlockComponent, {\n  name: 'Code Block',\n  inputs: [\n    {\n      name: 'code',\n      type: 'string',\n      defaultValue: 'const incr = num => num + 1',\n    },\n    {\n      name: 'language',\n      type: 'string',\n      defaultValue: 'javascript',\n    },\n  ],\n});\n```\n\nSee our full guide on [registering custom components here](https://www.builder.io/c/docs/custom-react-components).\n\nSee the [full reference docs for registerComponent options here](../core/docs/interfaces/Component.md).\n\n### BuilderContent\n\n#### Usage with Data Models\n\nAlthough you can already fetch data models from our Content API directly and use it as you would any other API resource, with a BuilderContent component you are able to use live Editing / Previewing / [A/B testing](https://forum.builder.io/t/a-b-testing-data-models/158) of your Data Models within the Builder Visual Editor.\n\n##### Example, setting up an editable theme:\n\n```tsx\n <BuilderContent model=\"site-settings\"> { (data, loading) => {\n   If (loading) {\n     return <Spinner />\n   }\n   return <>\n      /*pass values down to an example ThemeProvider, used as a wrapper in your application*/     \n       <ThemeProvider theme={data.theme} > \n           {props.children}\n       </ThemeProvider>\n   </>\n   }}\n</BuilderContent>\n```\n\nOr an example fetching server side and passing the content using the `content` prop, e.g. in Next.js\n\n```tsx\nexport const getStaticProps = async () => {\n  return {\n    props: {\n      builderDataContent: await builder.get('site-settings', /* other options like queries and targeting */).promise()\n    }\n  }\n}\n\nexport default function MyPage({ builderDataContent }) {\n  return <BuilderContent content={builderDataContent}>{data => \n    <ThemeProvider theme={data.theme}>\n      {/* ... more content ... */}\n    </ThemeProvider>\n  </BuilderContent>\n}\n```\n\n\n#### Usage with Page/Section Custom Fields\n\nPage and section models in builder can be extended with [custom fields](https://www.builder.io/c/docs/custom-fields).   To enable live editing / previewing on components that uses those custom fields, you can use BuilderContent to pass input data from the model to your components that are outside the rendered content\n\n##### Example, passing Custom Field input: \n```tsx\n<BuilderContent model=\"landing-page\">{ (data) => {\n       /*use your data here within your custom component*/\n        return <>\n           <FeaturedImage image={data.featuredImage} />\n           <BuilderComponent content={content} model=\"landing-page\" />\n       </>\n   }}\n</BuilderContent>\n```\n\n#### Passing content manually\n\nThis is useful for doing server side rendering, e.g. with [Gatsby](https://github.com/BuilderIO/builder/tree/master/examples/gatsby) and [Next.js](https://github.com/BuilderIO/builder/tree/master/examples/next-js) or via\nloading data from other sources than our default APIs, such as data in your own database saved via [webhooks](https://www.builder.io/c/docs/webhooks)\n\n```tsx\nconst content = await builder.get(â€˜your-data-modelâ€™, { ...options });\nif (content) {\n  /*use your data here*/\n  return <BuilderContent model=\"your-data-model\" content={content} >\n}\n```\n\n#### Advanced querying\nWhen using custom [models](https://www.builder.io/c/docs/guides/getting-started-with-models) and [fields](https://www.builder.io/c/docs/custom-fields) you can do more advanced filtering of your content with [queries](<(https://www.builder.io/c/docs/custom-fields)>)\nand [targeting](https://www.builder.io/c/docs/guides/targeting-and-scheduling)\n\n```tsx\nimport { BuilderContent, builder } from '@builder.io/react';\n\nbuilder.setUserAttributes({ isLoggedIn: false })\n\nexport default () => <div>\n  <BuilderContent\n     model=\"your-data-model\"\n     options={{ query: { 'data.something.$in': ['value a', 'value b'] } }} />\n  <!-- some other content -->\n</div>\n```\n\n### builder\n\nThe React SDK exports the core SDK's [builder object](../core), which can be used for setting things like\nyour API key and user attributes\n\n```tsx\nimport { builder } from '@builder.io/react';\n\nbuilder.init(YOUR_KEY);\n\n// Optional custom targeting\nbuilder.setUserAttributes({\n  userIsLoggedIn: true,\n  whateverKey: 'whatever value',\n});\n```\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@builder.io/react/-/react-1.1.54.tgz#80157848a6ff25e79bf7efb4d0de46c890f39dd5",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@builder.io/react/-/react-1.1.54.tgz",
    "hash": "80157848a6ff25e79bf7efb4d0de46c890f39dd5",
    "integrity": "sha512-OHOpykCWO9I5Brp/GgUg+2BpCXvaCL251bm/zj/yqDNAdmzzdUlfYZzFStQxmenCFEjhx9E/hGyWSi2QSY4ung==",
    "registry": "npm",
    "packageName": "@builder.io/react",
    "cacheIntegrity": "sha512-OHOpykCWO9I5Brp/GgUg+2BpCXvaCL251bm/zj/yqDNAdmzzdUlfYZzFStQxmenCFEjhx9E/hGyWSi2QSY4ung== sha1-gBV4SKb/Jeeb9++00N5GyJDzndU="
  },
  "registry": "npm",
  "hash": "80157848a6ff25e79bf7efb4d0de46c890f39dd5"
}