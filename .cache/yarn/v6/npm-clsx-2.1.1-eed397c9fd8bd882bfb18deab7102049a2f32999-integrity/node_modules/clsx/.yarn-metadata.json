{
  "manifest": {
    "name": "clsx",
    "version": "2.1.1",
    "repository": {
      "type": "git",
      "url": "https://github.com/lukeed/clsx.git"
    },
    "description": "A tiny (239B) utility for constructing className strings conditionally.",
    "module": "dist/clsx.mjs",
    "unpkg": "dist/clsx.min.js",
    "main": "dist/clsx.js",
    "types": "clsx.d.ts",
    "license": "MIT",
    "exports": {
      ".": {
        "import": {
          "types": "./clsx.d.mts",
          "default": "./dist/clsx.mjs"
        },
        "default": {
          "types": "./clsx.d.ts",
          "default": "./dist/clsx.js"
        }
      },
      "./lite": {
        "import": {
          "types": "./clsx.d.mts",
          "default": "./dist/lite.mjs"
        },
        "default": {
          "types": "./clsx.d.ts",
          "default": "./dist/lite.js"
        }
      }
    },
    "author": {
      "name": "Luke Edwards",
      "email": "luke.edwards05@gmail.com",
      "url": "https://lukeed.com"
    },
    "engines": {
      "node": ">=6"
    },
    "scripts": {
      "build": "node bin",
      "test": "uvu -r esm test"
    },
    "files": [
      "*.d.mts",
      "*.d.ts",
      "dist"
    ],
    "keywords": [
      "classes",
      "classname",
      "classnames"
    ],
    "devDependencies": {
      "esm": "3.2.25",
      "terser": "4.8.0",
      "uvu": "0.5.4"
    },
    "_registry": "npm",
    "_loc": "/home/user/.cache/yarn/v6/npm-clsx-2.1.1-eed397c9fd8bd882bfb18deab7102049a2f32999-integrity/node_modules/clsx/package.json",
    "readmeFilename": "readme.md",
    "readme": "# clsx [![CI](https://github.com/lukeed/clsx/workflows/CI/badge.svg)](https://github.com/lukeed/clsx/actions?query=workflow%3ACI) [![codecov](https://badgen.net/codecov/c/github/lukeed/clsx)](https://codecov.io/gh/lukeed/clsx) [![licenses](https://licenses.dev/b/npm/clsx)](https://licenses.dev/npm/clsx)\n\n> A tiny (239B) utility for constructing `className` strings conditionally.<Br>Also serves as a [faster](bench) & smaller drop-in replacement for the `classnames` module.\n\nThis module is available in three formats:\n\n* **ES Module**: `dist/clsx.mjs`\n* **CommonJS**: `dist/clsx.js`\n* **UMD**: `dist/clsx.min.js`\n\n\n## Install\n\n```\n$ npm install --save clsx\n```\n\n\n## Usage\n\n```js\nimport clsx from 'clsx';\n// or\nimport { clsx } from 'clsx';\n\n// Strings (variadic)\nclsx('foo', true && 'bar', 'baz');\n//=> 'foo bar baz'\n\n// Objects\nclsx({ foo:true, bar:false, baz:isTrue() });\n//=> 'foo baz'\n\n// Objects (variadic)\nclsx({ foo:true }, { bar:false }, null, { '--foobar':'hello' });\n//=> 'foo --foobar'\n\n// Arrays\nclsx(['foo', 0, false, 'bar']);\n//=> 'foo bar'\n\n// Arrays (variadic)\nclsx(['foo'], ['', 0, false, 'bar'], [['baz', [['hello'], 'there']]]);\n//=> 'foo bar baz hello there'\n\n// Kitchen sink (with nesting)\nclsx('foo', [1 && 'bar', { baz:false, bat:null }, ['hello', ['world']]], 'cya');\n//=> 'foo bar hello world cya'\n```\n\n\n## API\n\n### clsx(...input)\nReturns: `String`\n\n#### input\nType: `Mixed`\n\nThe `clsx` function can take ***any*** number of arguments, each of which can be an Object, Array, Boolean, or String.\n\n> **Important:** _Any_ falsey values are discarded!<br>Standalone Boolean values are discarded as well.\n\n```js\nclsx(true, false, '', null, undefined, 0, NaN);\n//=> ''\n```\n\n## Modes\n\nThere are multiple \"versions\" of `clsx` available, which allows you to bring only the functionality you need!\n\n#### `clsx`\n> **Size (gzip):** 239 bytes<br>\n> **Availability:** CommonJS, ES Module, UMD\n\nThe default `clsx` module; see [API](#API) for info.\n\n```js\nimport { clsx } from 'clsx';\n// or\nimport clsx from 'clsx';\n```\n\n#### `clsx/lite`\n> **Size (gzip):** 140 bytes<br>\n> **Availability:** CommonJS, ES Module<br>\n> **CAUTION:** Accepts **ONLY** string arguments!\n\nIdeal for applications that ***only*** use the string-builder pattern.\n\nAny non-string arguments are ignored!\n\n```js\nimport { clsx } from 'clsx/lite';\n// or\nimport clsx from 'clsx/lite';\n\n// string\nclsx('hello', true && 'foo', false && 'bar');\n// => \"hello foo\"\n\n// NOTE: Any non-string input(s) ignored\nclsx({ foo: true });\n//=> \"\"\n```\n\n## Benchmarks\n\nFor snapshots of cross-browser results, check out the [`bench`](bench) directory~!\n\n## Support\n\nAll versions of Node.js are supported.\n\nAll browsers that support [`Array.isArray`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray#Browser_compatibility) are supported (IE9+).\n\n>**Note:** For IE8 support and older, please install `clsx@1.0.x` and beware of [#17](https://github.com/lukeed/clsx/issues/17).\n\n## Tailwind Support\n\nHere some additional (optional) steps to enable classes autocompletion using `clsx` with Tailwind CSS.\n\n<details>\n<summary>\n  Visual Studio Code\n</summary>\n\n1. [Install the \"Tailwind CSS IntelliSense\" Visual Studio Code extension](https://marketplace.visualstudio.com/items?itemName=bradlc.vscode-tailwindcss)\n\n2. Add the following to your [`settings.json`](https://code.visualstudio.com/docs/getstarted/settings):\n\n  ```json\n   {\n    \"tailwindCSS.experimental.classRegex\": [\n      [\"clsx\\\\(([^)]*)\\\\)\", \"(?:'|\\\"|`)([^']*)(?:'|\\\"|`)\"]\n    ]\n   }\n  ```\n</details>\n\nYou may find the [`clsx/lite`](#clsxlite) module useful within Tailwind contexts. This is especially true if/when your application **only** composes classes in this pattern:\n\n```js\nclsx('text-base', props.active && 'text-primary', props.className);\n```\n\n## Related\n\n- [obj-str](https://github.com/lukeed/obj-str) - A smaller (96B) and similiar utility that only works with Objects.\n\n## License\n\nMIT Â© [Luke Edwards](https://lukeed.com)\n",
    "licenseText": "MIT License\n\nCopyright (c) Luke Edwards <luke.edwards05@gmail.com> (lukeed.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/clsx/-/clsx-2.1.1.tgz#eed397c9fd8bd882bfb18deab7102049a2f32999",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/clsx/-/clsx-2.1.1.tgz",
    "hash": "eed397c9fd8bd882bfb18deab7102049a2f32999",
    "integrity": "sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA==",
    "registry": "npm",
    "packageName": "clsx",
    "cacheIntegrity": "sha512-eYm0QWBtUrBWZWG0d386OGAw16Z995PiOVo2B7bjWSbHedGl5e0ZWaq65kOGgUSNesEIDkB9ISbTg/JK9dhCZA== sha1-7tOXyf2L2IK/sY3qtxAgSaLzKZk="
  },
  "registry": "npm",
  "hash": "eed397c9fd8bd882bfb18deab7102049a2f32999"
}