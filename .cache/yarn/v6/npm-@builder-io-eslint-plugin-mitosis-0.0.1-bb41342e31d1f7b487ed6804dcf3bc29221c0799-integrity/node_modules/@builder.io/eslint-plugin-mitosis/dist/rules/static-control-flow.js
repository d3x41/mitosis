"use strict";
exports.__esModule = true;
exports.staticControlFlow = void 0;
var types = require("@babel/types");
var isMitosisPath_1 = require("../helpers/isMitosisPath");
exports.staticControlFlow = {
    create: function (context) {
        if (!(0, isMitosisPath_1["default"])(context.getFilename()))
            return {};
        return {
            VariableDeclarator: function (node) {
                if (types.isVariableDeclarator(node)) {
                    if (types.isObjectPattern(node.id) &&
                        types.isIdentifier(node.init) &&
                        node.init.name === 'state') {
                        context.report({
                            node: node,
                            message: 'Destructuring the state object is currently not supported'
                        });
                    }
                }
            },
            CallExpression: function (node) {
                if (types.isCallExpression(node)) {
                    if (types.isIdentifier(node.callee) &&
                        node.callee.name === 'useEffect') {
                        var useEffectMessage = 'Only useEffect with an empty array second argument is allowed. E.g. useEffect(...) must be useEffect(..., [])';
                        var secondArg = node.arguments[1];
                        if (!(secondArg &&
                            types.isArrayExpression(secondArg) &&
                            secondArg.elements.length === 0)) {
                            context.report({
                                node: node,
                                message: useEffectMessage
                            });
                        }
                    }
                }
            },
            JSXExpressionContainer: function (node) {
                if (types.isJSXExpressionContainer(node)) {
                    if (types.isConditionalExpression(node.expression)) {
                        if (types.isJSXElement(node.expression.consequent) ||
                            types.isJSXElement(node.expression.alternate)) {
                            context.report({
                                node: node,
                                message: 'Ternaries around JSX Elements are not currently supported. Instead use binary expressions - e.g. {foo ? <bar /> : <baz />} should be {foo && <bar />}{!foo && <baz />}'
                            });
                        }
                    }
                }
            }
        };
    }
};
