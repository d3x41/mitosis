"use strict";
exports.__esModule = true;
var types = require("@babel/types");
var isMitosisPath_1 = require("../helpers/isMitosisPath");
// ------------------------------------------------------------------------------
// Rule Definition
// ------------------------------------------------------------------------------
var rule = {
    meta: {
        type: 'problem',
        docs: {
            description: 'disallow defining variables with the same name as a state property',
            recommended: true
        }
    },
    create: function (context) {
        // variables should be defined here
        var filename = context.getFilename();
        if (!(0, isMitosisPath_1["default"])(filename))
            return {};
        // ----------------------------------------------------------------------
        // Helpers
        // ----------------------------------------------------------------------
        // any helper functions should go here or else delete this section
        // ----------------------------------------------------------------------
        // Public
        // ----------------------------------------------------------------------
        //
        var listener = {
            CallExpression: function (node) {
                var program = context.getAncestors()[0];
                if (!types.isProgram(program))
                    return;
                var importSpecifiers = program.body.find(function (n) {
                    return types.isImportDeclaration(n);
                });
                if (!types.isImportDeclaration(importSpecifiers))
                    return;
                var useState = importSpecifiers.specifiers.find(function (n) {
                    if (types.isImportSpecifier(n) && n.imported.name === 'useState') {
                        return true;
                    }
                });
                if (!useState || !types.isIdentifier(node.callee))
                    return;
                var useStateHookLocalName = useState === null || useState === void 0 ? void 0 : useState.local.name;
                if (node.callee.name !== useStateHookLocalName ||
                    !types.isObjectExpression(node.arguments[0]))
                    return;
                var component = program.body.find(function (n) {
                    return types.isExportDefaultDeclaration(n);
                });
                if (!types.isExportDefaultDeclaration(component))
                    return;
                if (!types.isFunctionDeclaration(component.declaration) &&
                    !types.isArrowFunctionExpression(component.declaration))
                    return;
                if (!types.isBlock(component.declaration.body))
                    return;
                var componentBody = component.declaration.body.body;
                for (var _i = 0, _a = node.arguments[0].properties; _i < _a.length; _i++) {
                    var prop = _a[_i];
                    if (!types.isProperty(prop) ||
                        !types.isIdentifier(prop.key))
                        continue;
                    var name_1 = prop.key.name;
                    for (var _b = 0, componentBody_1 = componentBody; _b < componentBody_1.length; _b++) {
                        var n = componentBody_1[_b];
                        if (!types.isVariableDeclaration(n))
                            continue;
                        for (var _c = 0, _d = n.declarations; _c < _d.length; _c++) {
                            var d = _d[_c];
                            if (!types.isVariableDeclarator(d) ||
                                !types.isIdentifier(d.id) ||
                                d.id.name !== name_1)
                                continue;
                            context.report({
                                node: d,
                                message: 'variables with the same name as a state property will shadow it'
                            });
                        }
                    }
                }
            }
        };
        return listener;
    }
};
exports["default"] = rule;
