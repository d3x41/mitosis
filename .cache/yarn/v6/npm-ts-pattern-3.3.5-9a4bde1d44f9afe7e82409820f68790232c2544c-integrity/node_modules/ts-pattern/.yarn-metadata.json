{
  "manifest": {
    "name": "ts-pattern",
    "version": "3.3.5",
    "description": " The exhaustive Pattern Matching library for TypeScript.",
    "main": "lib/index.js",
    "types": "lib/index.d.ts",
    "scripts": {
      "build": "rimraf lib && tsc",
      "prepublishOnly": "npm run test && npm run build",
      "test": "jest",
      "perf": "tsc --project tests/tsconfig.json --noEmit --extendedDiagnostics"
    },
    "files": [
      "lib/**/*"
    ],
    "repository": {
      "type": "git",
      "url": "git+ssh://git@github.com/gvergnaud/ts-pattern.git"
    },
    "keywords": [
      "pattern",
      "matching",
      "pattern-matching",
      "typescript",
      "match-with",
      "match",
      "switch",
      "adt"
    ],
    "author": {
      "name": "Gabriel Vergnaud"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/gvergnaud/ts-pattern/issues"
    },
    "homepage": "https://github.com/gvergnaud/ts-pattern#readme",
    "devDependencies": {
      "@types/jest": "^27.0.2",
      "jest": "^27.4.5",
      "prettier": "^2.2.1",
      "rimraf": "^3.0.2",
      "ts-jest": "^27.1.2",
      "typescript": "^4.5.4"
    },
    "_registry": "npm",
    "_loc": "/home/user/.cache/yarn/v6/npm-ts-pattern-3.3.5-9a4bde1d44f9afe7e82409820f68790232c2544c-integrity/node_modules/ts-pattern/package.json",
    "readmeFilename": "README.md",
    "readme": "<h1 align=\"center\">ts-pattern</h1>\n\n<p align=\"center\">\nThe exhaustive Pattern Matching library for <a href=\"https://github.com/microsoft/TypeScript\">TypeScript</a>\nwith smart type inference.\n</p>\n\n<p align=\"center\">\n  <a href=\"https://www.npmjs.com/package/ts-pattern\">\n    <img src=\"https://img.shields.io/npm/dm/ts-pattern.svg\" alt=\"downloads per month\" height=\"18\">\n  </a>\n  <a href=\"https://www.npmjs.com/package/ts-pattern\">\n    <img src=\"https://img.shields.io/npm/v/ts-pattern.svg\" alt=\"npm version\" height=\"18\">\n  </a>\n  <a href=\"https://github.com/gvergnaud/ts-pattern\">\n    <img src=\"https://img.shields.io/npm/l/ts-pattern.svg\" alt=\"license\" height=\"18\">\n  </a>\n</p>\n\n```ts\nimport { match, select } from 'ts-pattern';\n\ntype Data =\n  | { type: 'text'; content: string }\n  | { type: 'img'; src: string };\n\ntype Result =\n  | { type: 'ok'; data: Data }\n  | { type: 'error'; error: Error };\n\nconst result: Result = ...;\n\nreturn match(result)\n  .with({ type: 'error' }, (res) => `<p>Oups! An error occured</p>`)\n  .with({ type: 'ok', data: { type: 'text' } }, (res) => `<p>${res.data.content}</p>`)\n  .with({ type: 'ok', data: { type: 'img', src: select() } }, (src) => `<img src=${src} />`)\n  .exhaustive();\n```\n\n## About\n\nWrite **better** and **safer conditions**. Pattern matching lets you express complex conditions in a single, compact expression. Your code becomes **shorter** and **more readable**. Exhaustiveness checking ensures you haven’t forgotten **any possible case**.\n\n## Features\n\n- Works on **any data structure**: nested objects, arrays, tuples, Sets, Maps and all primitive types.\n- **Typesafe**, with helpful type inference.\n- **Exhaustive matching** support, enforcing that you are matching every possible case with `.exhaustive()`.\n- **Expressive API**, with catch-all and type specific **wildcards**: `__`.\n- Supports `when(<predicate>)` and `not(<pattern>)` patterns for complex cases.\n- Supports properties selection, via the `select(<name?>)` function.\n- Tiny bundle footprint ([**only 1.4kb**](https://bundlephobia.com/package/ts-pattern@3.2.4)).\n\n## What is Pattern Matching?\n\nPattern Matching is a technique coming from functional programming languages to declaratively write conditional code branches based on the structure of a value. This technique has proven itself to be much more powerful and much less verbose than imperative alternatives (if/else/switch statements) especially when branching on complex data structures or on several values.\n\nPattern Matching is implemented in Haskell, Rust, Swift, Elixir and many other languages. There is [a tc39 proposal](https://github.com/tc39/proposal-pattern-matching) to add Pattern Matching to the EcmaScript specification, but it is still in stage 1 and isn't likely to land before several years (if ever). Luckily, pattern matching can be implemented in userland. `ts-pattern` Provides a typesafe pattern matching implementation that you can start using today.\n\nRead the introduction blog post: [Bringing Pattern Matching to TypeScript 🎨 Introducing TS-Pattern v3.0](https://dev.to/gvergnaud/bringing-pattern-matching-to-typescript-introducing-ts-pattern-v3-0-o1k)\n\n## Installation\n\nVia npm\n\n```\nnpm install ts-pattern\n```\n\nVia yarn\n\n```\nyarn add ts-pattern\n```\n\n### compatibility with different TypeScript versions\n\n| ts-pattern | TypeScript v4.2+ | TypeScript v4.1+ | TypeScript v3.x- |\n| ---------- | ---------------- | ---------------- | ---------------- |\n| v3.x       | ✅               | ⚠️               | ❌               |\n| v2.x       | ✅               | ✅               | ❌               |\n| v1.x       | ✅               | ✅               | ✅               |\n\n✅ Full support\n\n⚠️ Partial support, everything works except passing more than 2 patterns to `.with()`\n\n❌ No support\n\n# Documentation\n\n- [Code Sandbox Examples](#code-sandbox-examples)\n- [Getting Started](#getting-started)\n- [API Reference](#api-reference)\n  - [`match`](#match)\n  - [`.with`](#with)\n  - [`.when`](#when)\n  - [`.otherwise`](#otherwise)\n  - [`.run`](#run)\n  - [`isMatching`](#ismatching)\n  - [Patterns](#patterns)\n    - [Literals](#literals)\n    - [`__` wildcard](#__-wildcard)\n    - [`__.string` wildcard](#__string-wildcard)\n    - [`__.number` wildcard](#__number-wildcard)\n    - [`__.boolean` wildcard](#__boolean-wildcard)\n    - [`__.nullish` wildcard](#__nullish-wildcard)\n    - [`__.NaN` wildcard](#__nan-wildcard)\n    - [Objects](#objects)\n    - [Lists (arrays)](#lists-arrays)\n    - [Tuples (arrays)](#tuples-arrays)\n    - [Sets](#sets)\n    - [Maps](#maps)\n    - [`when` guards](#when-guards)\n    - [`not` patterns](#not-patterns)\n    - [`select` patterns](#select-patterns)\n    - [`instanceOf` patterns](#instanceof-patterns)\n- [Type inference](#type-inference)\n- [Inspirations](#inspirations)\n\n## Code Sandbox Examples\n\n- [Basic Demo](https://codesandbox.io/s/ts-pattern-examples-0s6d8?file=/src/examples/basic.tsx)\n- [Gif fetcher app Demo (with React)](https://codesandbox.io/s/ts-pattern-gif-search-demo-n8h4k?file=/src/App.tsx)\n- [Reducer Demo (with React)](https://codesandbox.io/s/ts-pattern-reducer-example-c4yuq?file=/src/App.tsx)\n- [Untyped Input Demo (Handling an API response)](https://codesandbox.io/s/ts-pattern-examples-0s6d8?file=/src/examples/api.tsx)\n- [`when` Guard Demo](https://codesandbox.io/s/ts-pattern-examples-0s6d8?file=/src/examples/when.tsx)\n- [`not` Pattern Demo](https://codesandbox.io/s/ts-pattern-examples-0s6d8?file=/src/examples/not.tsx)\n- [`select` Pattern Demo](https://codesandbox.io/s/ts-pattern-examples-0s6d8?file=/src/examples/select.tsx)\n\n## Getting Started\n\nAs an example, we are going to create a state reducer for a\nfrontend application fetching some data using an HTTP request.\n\n### Example: a state reducer with ts-pattern\n\nOur application can be in four different states: `idle`, `loading`,\n`success` and `error`. Depending on which state we are in, some events\ncan occur. Here are all the possible types of event our application\ncan respond to: `fetch`, `success`, `error` and `cancel`.\n\nI use the word `event` but you can replace it with `action` if you are used\nto Redux's terminology.\n\n```ts\ntype State =\n  | { status: 'idle' }\n  | { status: 'loading'; startTime: number }\n  | { status: 'success'; data: string }\n  | { status: 'error'; error: Error };\n\ntype Event =\n  | { type: 'fetch' }\n  | { type: 'success'; data: string }\n  | { type: 'error'; error: Error }\n  | { type: 'cancel' };\n```\n\nEven though our application can handle 4 events, **only a subset** of these\nevents **make sense for each given state**. For instance we can only `cancel`\na request if we are currently in the `loading` state.\nTo avoid unwanted state changes that could lead to bugs, we want to create\na reducer function that **matches on both the state and the event**\nand return a new state.\n\nThis is a case where `match` really shines. Instead of writing nested\nswitch statements, we can do that in a very expressive way:\n\n```ts\nimport { match, __, not, select, when } from 'ts-pattern';\n\nconst reducer = (state: State, event: Event): State =>\n  match<[State, Event], State>([state, event])\n    .with([{ status: 'loading' }, { type: 'success' }], ([, event]) => ({\n      status: 'success',\n      data: event.data,\n    }))\n\n    .with(\n      [{ status: 'loading' }, { type: 'error', error: select() }],\n      (error) => ({\n        status: 'error',\n        error,\n      })\n    )\n\n    .with([{ status: not('loading') }, { type: 'fetch' }], () => ({\n      status: 'loading',\n      startTime: Date.now(),\n    }))\n\n    .with(\n      [\n        { status: 'loading', startTime: when((t) => t + 2000 < Date.now()) },\n        { type: 'cancel' },\n      ],\n      () => ({\n        status: 'idle',\n      })\n    )\n\n    .with(__, () => state)\n\n    .exhaustive();\n```\n\n**Let's go through this bit by bit:**\n\n### match(value)\n\n`match` takes a value and returns a [_builder_](https://en.wikipedia.org/wiki/Builder_pattern) on which you can add your pattern matching cases.\n\n```ts\nmatch<[State, Event], State>([state, event]);\n```\n\nHere we wrap the state and the event objects in an array and we explicitly\nspecify the type `[State, Event]` to make sure it is interpreted as\na [Tuple](#tuples-arrays) by TypeScript, so we\ncan match on each value separately.\n\nMost of the time, you don't need to specify the type of input\nand output with `match<Input, Output>(...)` because `match` is able to\ninfer both of these types.\n\n### .with(pattern, handler)\n\nThen we add a first `with` clause:\n\n```ts\n  .with([{ status: 'loading' }, { type: 'success' }], ([state, event]) => ({\n    // `state` is infered as { status: 'loading' }\n    // `event` is infered as { type: 'success', data: string }\n    status: 'success',\n    data: event.data,\n  }))\n```\n\nThe first argument is the **pattern**: the **shape of value**\nyou expect for this branch.\n\nThe second argument is the **handler function**: the code **branch** that will be called if\nthe input value matches the pattern.\n\nThe handler function takes the input value as first parameter with its type **narrowed down** to what the pattern matches.\n\n### select(name?)\n\nIn the second `with` clause, we use the `select` function:\n\n```ts\n  .with(\n    [{ status: 'loading' }, { type: 'error', error: select() }],\n    (error) => ({\n      status: 'error',\n      error,\n    })\n  )\n```\n\n`select` let you **extract** a piece of your input value and **inject** it into your handler. It is pretty useful when pattern matching on deep data structures because it avoids the hassle of destructuring your input in your handler.\n\nSince we didn't pass any name to `select()`, It will inject the `event.error` property as first argument to the handler function. Note that you can still access **the full input value** with its type narrowed by your pattern as **second argument** of the handler function:\n\n```ts\n  .with(\n    [{ status: 'loading' }, { type: 'error', error: select() }],\n    (error, stateAndEvent) => {\n      // error: Error\n      // stateAndEvent: [{ status: 'loading' }, { type: 'error', error: Error }]\n    }\n  )\n```\n\nIn a pattern, we can only have a **single** anonymous selection. If you need to select more properties on your input data structure, you will need to give them **names**:\n\n```ts\n.with(\n    [{ status: 'success', data: select('prevData') }, { type: 'error', error: select('err') }],\n    ({ prevData, err }) => {\n      // Do something with (prevData: string) and (err: Error).\n    }\n  )\n```\n\nEach named selection will be injected inside a `selections` object, passed as first argument to the handler function. Names can be any strings.\n\n### not(pattern)\n\nIf you need to match on everything **but** a specific value, you can use a `not(<pattern>)` pattern. it's a function taking a pattern and returning its opposite:\n\n```ts\n  .with([{ status: not('loading') }, { type: 'fetch' }], () => ({\n    status: 'loading',\n  }))\n```\n\n### `when()` and guard functions\n\nSometimes, we need to make sure our input value respects a condition that can't be expressed by a pattern. For example, imagine you need to check if a number is positive. In these cases, we can use **guard functions**: functions taking a value and returning a `boolean`.\n\nWith `ts-pattern` there are two options to use a guard function:\n\n- use `when(<guard function>)` inside your pattern\n- pass it as second parameter to `.with(...)`\n\n#### using when(predicate)\n\n```ts\n  .with(\n    [\n      {\n        status: 'loading',\n        startTime: when((t) => t + 2000 < Date.now()),\n      },\n      { type: 'cancel' },\n    ],\n    () => ({\n      status: 'idle',\n    })\n  )\n```\n\n#### Passing a guard function to `.with(...)`\n\n`.with` optionally accepts a guard function as second parameter, between\nthe `pattern` and the `handler` callback:\n\n```ts\n  .with(\n    [{ status: 'loading' },{ type: 'cancel' }],\n    ([state, event]) => state.startTime + 2000 < Date.now(),\n    () => ({\n      status: 'idle'\n    })\n  )\n```\n\nThis pattern will only match if the guard function returns `true`.\n\n### the `__` wildcard\n\n`__` will match any value.\nYou can use it at the top level, or inside your pattern.\n\n```ts\n  .with(__, () => state)\n\n  // You could also use it inside your pattern:\n  .with([__, __], () => state)\n\n  // at any level:\n  .with([__, { type: __ }], () => state)\n\n```\n\n### .exhaustive(), .otherwise() and .run()\n\n```ts\n  .exhaustive();\n```\n\n`.exhaustive()` **executes** the pattern matching expression, and **returns the result**. It also enables **exhaustiveness checking**, making sure we don't forget any possible case in our input value. This extra type safety is very nice because forgetting a case is an easy mistake to make, especially in an evolving code-base.\n\nNote that exhaustive pattern matching is **optional**. It comes with the trade-off of having **longer compilation times** because the type checker has more work to do.\n\nAlternatively you can use `.otherwise()`, which takes an handler function returning a default value. `.otherwise(handler)` is equivalent to `.with(__, handler).exhaustive()`.\n\n```ts\n  .otherwise(() => state);\n```\n\nIf you don't want to use `.exhaustive()` and also don't want to provide a default value with `.otherwise()`, you can use `.run()` instead:\n\n```ts\n  .run();\n```\n\nIt's just like `.exhaustive()`, but it's **unsafe** and might throw runtime error if no branch matches your input value.\n\n### Matching several patterns\n\nAs you may know, `switch` statements allow handling several cases with\nthe same code block:\n\n```ts\nswitch (type) {\n  case 'text':\n  case 'span':\n  case 'p':\n    return 'text';\n\n  case 'btn':\n  case 'button':\n    return 'button';\n}\n```\n\nSimilarly, ts-pattern lets you pass several patterns to `.with()` and if\none of these patterns matches your input, the handler function will be called:\n\n```ts\nconst sanitize = (name: string) =>\n  match(name)\n    .with('text', 'span', 'p', () => 'text')\n    .with('btn', 'button', () => 'button')\n    .otherwise(() => name);\n\nsanitize('span'); // 'text'\nsanitize('p'); // 'text'\nsanitize('button'); // 'button'\n```\n\nObviously, it also works with more complex patterns than strings. Exhaustive matching also works as you would expect.\n\n## API Reference\n\n### `match`\n\n```ts\nmatch(value);\n```\n\nCreate a `Match` object on which you can later call `.with`, `.when`, `.otherwise` and `.run`.\n\n#### Signature\n\n```ts\nfunction match<TInput, TOutput>(input: TInput): Match<TInput, TOutput>;\n```\n\n#### Arguments\n\n- `input`\n  - **Required**\n  - the input value your patterns will be tested against.\n\n### `.with`\n\n```ts\nmatch(...)\n  .with(pattern, [...patterns], handler)\n```\n\n#### Signature\n\n```ts\nfunction with(\n  pattern: Pattern<TInput>,\n  handler: (value: TInput, selections: Selections<TInput>) => TOutput\n): Match<TInput, TOutput>;\n\n// Overload for multiple patterns\nfunction with(\n  pattern1: Pattern<TInput>,\n  ...patterns: Pattern<TInput>[],\n  // no selection object is provided when using multiple patterns\n  handler: (value: TInput) => TOutput\n): Match<TInput, TOutput>;\n\n// Overload for guard functions\nfunction with(\n  pattern: Pattern<TInput>[],\n  when: (value: TInput) => unknown,\n  handler: (\n    [selection: Selection<TInput>, ]\n    value: TInput\n  ) => TOutput\n): Match<TInput, TOutput>;\n```\n\n#### Arguments\n\n- `pattern: Pattern<TInput>`\n  - **Required**\n  - The pattern your input must match for the handler to be called.\n  - [See all valid patterns below](#patterns)\n  - If you provide several patterns before providing the `handler`, the `with` clause will match if one of the patterns matches.\n- `when: (value: TInput) => unknown`\n  - Optional\n  - Additional condition the input must satisfy for the handler to be called.\n  - The input will match if your guard function returns a truthy value.\n  - `TInput` might be narrowed to a more precise type using the `pattern`.\n- `handler: (value: TInput, selections: Selections<TInput>) => TOutput`\n  - **Required**\n  - Function called when the match conditions are satisfied.\n  - All handlers on a single `match` case must return values of the same type, `TOutput`.\n  - `TInput` might be narrowed to a more precise type using the `pattern`.\n  - `selections` is an object of properties selected from the input with the [`select` function](#select-patterns).\n\n### `.when`\n\n```ts\nmatch(...)\n  .when(predicate, handler)\n```\n\n#### Signature\n\n```ts\nfunction when(\n  predicate: (value: TInput) => unknown,\n  handler: (value: TInput) => TOutput\n): Match<TInput, TOutput>;\n```\n\n#### Arguments\n\n- `predicate: (value: TInput) => unknown`\n  - **Required**\n  - Condition the input must satisfy for the handler to be called.\n- `handler: (value: TInput) => TOutput`\n  - **Required**\n  - Function called when the predicate condition is satisfied.\n  - All handlers on a single `match` case must return values of the same type, `TOutput`.\n\n### `.exhaustive`\n\n```ts\nmatch(...)\n  .with(...)\n  .exhaustive()\n```\n\nExecutes the match case, return its result, and enable exhaustive pattern matching, making sure at compile time that all possible cases are handled.\n\n#### Signature\n\n```ts\nfunction exhaustive(): IOutput;\n```\n\n### `.otherwise`\n\n```ts\nmatch(...)\n  .with(...)\n  .otherwise(defaultHandler)\n```\n\nExecutes the match case and return its result.\n\n#### Signature\n\n```ts\nfunction otherwise(defaultHandler: (value: TInput) => TOutput): TOutput;\n```\n\n#### Arguments\n\n- `defaultHandler: (value: TInput) => TOutput`\n  - **Required**\n  - Function called if no pattern matched the input value.\n  - Think of it as the `default:` case of `switch` statements.\n  - All handlers on a single `match` case must return values of the same type, `TOutput`.\n\n### `.run`\n\n```ts\nmatch(...)\n  .with(...)\n  .run()\n```\n\nExecutes the match case and return its result.\n\n#### Signature\n\n```ts\nfunction run(): TOutput;\n```\n\n### `isMatching`\n\nWith a single argument:\n\n```ts\nimport { isMatching, __ } from 'ts-pattern';\n\nconst isBlogPost = isMatching({\n  title: __.string,\n  description: __.string,\n});\n\nif (isBlogPost(value)) {\n  // value: { title: string, description: string }\n}\n```\n\nWith two arguments:\n\n```ts\nconst blogPostPattern = {\n  title: __.string,\n  description: __.string,\n};\n\nif (isMatching(blogPostPattern, value)) {\n  // value: { title: string, description: string }\n}\n```\n\nType guard function to check if a value is matching a pattern or not.\n\n#### Signature\n\n```ts\nexport function isMatching<p extends Pattern<any>>(\n  pattern: p\n): (value: any) => value is InvertPattern<p>;\nexport function isMatching<p extends Pattern<any>>(\n  pattern: p,\n  value: any\n): value is InvertPattern<p>;\n```\n\n#### Arguments\n\n- `pattern: Pattern<any>`\n  - **Required**\n  - The pattern a value should match.\n- `value?: any`\n  - **Optional**\n  - if a value is given as second argument, `isMatching` will return a boolean telling us whether or not the value matches the pattern.\n  - if the only argument given to the function is the pattern, then `isMatching` will return a **type guard function** taking a value and returning a boolean telling us whether or not the value matches the pattern.\n\n### Patterns\n\nPatterns are values matching one of the possible shapes of your input. They can\nbe literal values, data structures, wildcards, or special functions like `not`,\n`when` and `select`.\n\nIf your input isn't typed, (if it's a `any` or a `unknown`), you have no constraints\non the shape of your pattern, you can put whatever you want. In your handler, your\nvalue will take the type described by your pattern.\n\n#### Literals\n\nLiterals are primitive JavaScript values, like number, string, boolean, bigint, null, undefined, and symbol.\n\n```ts\nimport { match } from 'ts-pattern';\n\nconst input: unknown = 2;\n\nconst output = match(input)\n  .with(2, () => 'number: two')\n  .with(true, () => 'boolean: true')\n  .with('hello', () => 'string: hello')\n  .with(undefined, () => 'undefined')\n  .with(null, () => 'null')\n  .with(20n, () => 'bigint: 20n')\n  .otherwise(() => 'something else');\n\nconsole.log(output);\n// => 'two'\n```\n\n#### `__` wildcard\n\nThe `__` pattern will match any value.\n\n```ts\nimport { match, __ } from 'ts-pattern';\n\nconst input = 'hello';\n\nconst output = match(input)\n  .with(__, () => 'It will always match')\n  .otherwise(() => 'This string will never be used');\n\nconsole.log(output);\n// => 'It will always match'\n```\n\n#### `__.string` wildcard\n\nThe `__.string` pattern will match any value of type `string`.\n\n```ts\nimport { match, __ } from 'ts-pattern';\n\nconst input = 'hello';\n\nconst output = match(input)\n  .with('bonjour', () => 'Won‘t match')\n  .with(__.string, () => 'it is a string!')\n  .run();\n\nconsole.log(output);\n// => 'it is a string!'\n```\n\n#### `__.number` wildcard\n\nThe `__.number` pattern will match any value of type `number`.\n\n```ts\nimport { match, __ } from 'ts-pattern';\n\nconst input = 2;\n\nconst output = match<number | string>(input)\n  .with(__.string, () => 'it is a string!')\n  .with(__.number, () => 'it is a number!')\n  .run();\n\nconsole.log(output);\n// => 'it is a number!'\n```\n\n#### `__.boolean` wildcard\n\nThe `__.boolean` pattern will match any value of type `boolean`.\n\n```ts\nimport { match, __ } from 'ts-pattern';\n\nconst input = true;\n\nconst output = match<number | string | boolean>(input)\n  .with(__.string, () => 'it is a string!')\n  .with(__.number, () => 'it is a number!')\n  .with(__.boolean, () => 'it is a boolean!')\n  .run();\n\nconsole.log(output);\n// => 'it is a boolean!'\n```\n\n#### `__.nullish` wildcard\n\nThe `__.nullish` pattern will match any value of type `null` or `undefined`.\n\nYou will **not often need this wildcard** as ordinarily `null` and `undefined`\nare their own wildcards.\n\nHowever, sometimes `null` and `undefined` appear in a union together\n(e.g. `null | undefined | string`) and you may want to treat them as equivalent.\n\n```ts\nimport { match, __ } from 'ts-pattern';\n\nconst input = null;\n\nconst output = match<number | string | boolean | null | undefined>(input)\n  .with(__.string, () => 'it is a string!')\n  .with(__.number, () => 'it is a number!')\n  .with(__.boolean, () => 'it is a boolean!')\n  .with(__.nullish, () => 'it is either null or undefined!')\n  .with(null, () => 'it is null!')\n  .with(undefined, () => 'it is undefined!')\n  .exhaustive();\n\nconsole.log(output);\n// => 'it is either null or undefined!'\n```\n\n#### `__.NaN` wildcard\n\nThe `__.NaN` pattern will match `NaN` values.\n\nNote that `__.number` also matches `NaNs`, but this pattern lets you\nexplicitly match them if you want to handle them separately:\n\n```ts\nimport { match, __ } from 'ts-pattern';\n\nconst input = NaN;\nconst output = match<number>(input)\n  .with(__.NaN, () => 'This is not a number!')\n  .with(__.number, () => 'This is a number!')\n  .exhaustive();\n\nconsole.log(output);\n// => 'This is not a number!'\n```\n\n#### Objects\n\nA pattern can be an object with sub-pattern properties. In order to match,\nthe input must be an object with all properties defined on the pattern object\nand each property must match its sub-pattern.\n\n```ts\nimport { match } from 'ts-pattern';\n\ntype Input =\n  | { type: 'user'; name: string }\n  | { type: 'image'; src: string }\n  | { type: 'video'; seconds: number };\n\nlet input: Input = { type: 'user', name: 'Gabriel' };\n\nconst output = match(input)\n  .with({ type: 'image' }, () => 'image')\n  .with({ type: 'video', seconds: 10 }, () => 'video of 10 seconds.')\n  .with({ type: 'user' }, ({ name }) => `user of name: ${name}`)\n  .otherwise(() => 'something else');\n\nconsole.log(output);\n// => 'user of name: Gabriel'\n```\n\n#### Lists (arrays)\n\nTo match on a list of values, your pattern can be an array with a single sub-pattern in it.\nThis sub-pattern will be tested against all elements in your input array, and they\nmust all match for your list pattern to match.\n\n```ts\nimport { match, __ } from 'ts-pattern';\n\ntype Input = { title: string; content: string }[];\n\nlet input: Input = [\n  { title: 'Hello world!', content: 'This is a very interesting content' },\n  { title: 'Bonjour!', content: 'This is a very interesting content too' },\n];\n\nconst output = match(input)\n  .with(\n    [{ title: __.string, content: __.string }],\n    (posts) => 'a list of posts!'\n  )\n  .otherwise(() => 'something else');\n\nconsole.log(output);\n// => 'a list of posts!'\n```\n\n#### Tuples (arrays)\n\nIn TypeScript, [Tuples](https://en.wikipedia.org/wiki/Tuple) are arrays with a fixed\nnumber of elements which can be of different types. You can pattern match on tuples\nwith a tuple pattern, matching your value in length and shape.\n\n```ts\nimport { match, __ } from 'ts-pattern';\n\ntype Input =\n  | [number, '+', number]\n  | [number, '-', number]\n  | [number, '*', number]\n  | ['-', number];\n\nconst input: Input = [3, '*', 4];\n\nconst output = match<Input>(input)\n  .with([__, '+', __], ([x, , y]) => x + y)\n  .with([__, '-', __], ([x, , y]) => x - y)\n  .with([__, '*', __], ([x, , y]) => x * y)\n  .with(['-', __], ([, x]) => -x)\n  .otherwise(() => NaN);\n\nconsole.log(output);\n// => 12\n```\n\n#### Sets\n\nSimilarly to array patterns, set patterns have a different meaning\nif they contain a single sub-pattern or several of them:\n\n```ts\nimport { match, __ } from 'ts-pattern';\n\ntype Input = Set<string | number>;\n\nconst input: Input = new Set([1, 2, 3]);\n\nconst output = match<Input>(input)\n  .with(new Set([1, 'hello']), (set) => `Set contains 1 and 'hello'`)\n  .with(new Set([1, 2]), (set) => `Set contains 1 and 2`)\n  .with(new Set([__.string]), (set) => `Set contains only strings`)\n  .with(new Set([__.number]), (set) => `Set contains only numbers`)\n  .otherwise(() => '');\n\nconsole.log(output);\n// => 'Set contains 1 and 2'\n```\n\nIf a Set pattern contains one single wildcard pattern, it will match if\neach value in the input set match the wildcard.\n\nIf a Set pattern contains several values, it will match if the\ninput Set contains each of these values.\n\n#### Maps\n\nMap patterns are similar to object patterns. They match if each\nkeyed sub-pattern match the input value for the same key.\n\n```ts\nimport { match, __ } from 'ts-pattern';\n\ntype Input = Map<string, string | number>;\n\nconst input: Input = new Map([\n  ['a', 1],\n  ['b', 2],\n  ['c', 3],\n]);\n\nconst output = match<Input>(input)\n  .with(new Map([['b', 2]]), (map) => `map.get('b') is 2`)\n  .with(new Map([['a', __.string]]), (map) => `map.get('a') is a string`)\n  .with(\n    new Map([\n      ['a', __.number],\n      ['c', __.number],\n    ]),\n    (map) => `map.get('a') and map.get('c') are number`\n  )\n  .otherwise(() => '');\n\nconsole.log(output);\n// => 'map.get('b') is 2'\n```\n\n#### `when` guards\n\nthe `when` function enables you to test the input with a custom guard function.\nThe pattern will match only if all `when` functions return a truthy value.\n\nNote that you can narrow down the type of your input by providing a\n[Type Guard function](https://www.typescriptlang.org/docs/handbook/advanced-types.html#user-defined-type-guards) to when.\n\n```ts\nimport { match, when } from 'ts-pattern';\n\ntype Input = { score: number };\n\nconst output = match<Input>({ score: 10 })\n  .with(\n    {\n      score: when((score): score is 5 => score === 5),\n    },\n    (input) => '😐' // input is infered as { score: 5 }\n  )\n  .with({ score: when((score) => score < 5) }, () => '😞')\n  .with({ score: when((score) => score > 5) }, () => '🙂')\n  .run();\n\nconsole.log(output);\n// => '🙂'\n```\n\n#### `not` patterns\n\nThe `not` function enables you to match on everything **but** a specific value.\nit's a function taking a pattern and returning its opposite:\n\n```ts\nimport { match, not } from 'ts-pattern';\n\ntype Input = boolean | number;\n\nconst toNumber = (input: Input) =>\n  match(input)\n    .with(not(__.boolean), (n) => n) // n: number\n    .with(true, () => 1)\n    .with(false, () => 0)\n    .run();\n\nconsole.log(toNumber(2));\n// => 2\nconsole.log(toNumber(true));\n// => 1\n```\n\n#### `select` patterns\n\nThe `select` function enables us to pick a piece of our input data structure\nand inject it in our handler function.\n\nIt's especially useful when pattern matching on deep data structure to\navoid the hassle of destructuring it in the handler function.\n\nSelections can be either named (with `select('someName')`) or anonymous (with `select()`).\n\nYou can have only one anonymous selection by pattern, and the selected value will be directly inject in your handler as first argument:\n\n```ts\nimport { match, select } from 'ts-pattern';\n\ntype Input =\n  | { type: 'post'; user: { name: string } }\n  | { ... };\n\nconst input = { type: 'post', user: { name: 'Gabriel' } }\n\nconst output = match<Input>(input)\n    .with(\n      { type: 'post', user: { name: select() } },\n      username => username // username: string\n    )\n    .otherwise(() => 'anonymous');\n\nconsole.log(output);\n// => 'Gabriel'\n```\n\nIf you need to select several things inside your input data structure, you can name your selections by giving a string to `select(<name>)`. Each selection will be passed as first argument to your handler in an object.\n\n```ts\nimport { match, select } from 'ts-pattern';\n\ntype Input =\n  | { type: 'post'; user: { name: string }, content: string }\n  | { ... };\n\nconst input = { type: 'post', user: { name: 'Gabriel' }, content: 'Hello!' }\n\nconst output = match<Input>(input)\n    .with(\n      { type: 'post', user: { name: select('name') }, content: select('body') },\n      ({ name, body }) => `${name} wrote \"${body}\"`\n    )\n    .otherwise(() => '');\n\nconsole.log(output);\n// => 'Gabriel wrote \"Hello!\"'\n```\n\n#### `instanceOf` patterns\n\nThe `instanceOf` function lets you build a pattern to check if\na value is an instance of a class:\n\n```ts\nimport { match, instanceOf } from 'ts-pattern';\n\nclass A {\n  a = 'a';\n}\nclass B {\n  b = 'b';\n}\n\ntype Input = { value: A | B };\n\nconst input = { value: new A() };\n\nconst output = match<Input>(input)\n  .with({ value: instanceOf(A) }, (a) => {\n    return 'instance of A!';\n  })\n  .with({ value: instanceOf(B) }, (b) => {\n    return 'instance of B!';\n  })\n  .exhaustive();\n\nconsole.log(output);\n// => 'instance of A!'\n```\n\n### type inference\n\n`ts-pattern` heavily relies on TypeScript's type system to automatically infer the precise type of your input value based on your pattern. Here are a few examples showing how the input type would be narrowed using various patterns:\n\n```ts\ntype Input = { type: string } | string;\n\nmatch<Input, 'ok'>({ type: 'hello' })\n  .with(__, (value) => 'ok') // value: Input\n  .with(__.string, (value) => 'ok') // value: string\n  .with(\n    when((value) => true),\n    (value) => 'ok' // value: Input\n  )\n  .with(\n    when((value): value is string => true),\n    (value) => 'ok' // value: string\n  )\n  .with(not('hello'), (value) => 'ok') // value: Input\n  .with(not(__.string), (value) => 'ok') // value: { type: string }\n  .with(not({ type: __.string }), (value) => 'ok') // value: string\n  .with(not(when(() => true)), (value) => 'ok') // value: Input\n  .with({ type: __ }, (value) => 'ok') // value: { type: string }\n  .with({ type: __.string }, (value) => 'ok') // value: { type: string }\n  .with({ type: when(() => true) }, (value) => 'ok') // value: { type: string }\n  .with({ type: not('hello' as const) }, (value) => 'ok') // value: { type: string }\n  .with({ type: not(__.string) }, (value) => 'ok') // value: never\n  .with({ type: not(when(() => true)) }, (value) => 'ok') // value: { type: string }\n  .run();\n```\n\n## Inspirations\n\nThis library has been heavily inspired by this great article by Wim Jongeneel:\n[Pattern Matching in TypeScript with Record and Wildcard Patterns](https://medium.com/swlh/pattern-matching-in-typescript-with-record-and-wildcard-patterns-6097dd4e471d).\nIt made me realize pattern matching could be implemented in userland and we didn't have\nto wait for it to be added to the language itself. I'm really grateful for that 🙏\n\n#### how is this different from `typescript-pattern-matching`\n\nWim Jongeneel released his own npm package for pattern matching. `ts-pattern` has a few\nnotable differences:\n\n- `ts-patterns`'s goal is to be a well unit-tested, well documented, production ready library.\n- It supports more data structures, like tuples, sets and maps.\n- It provides a \"catch all\" pattern: `__`.\n- It supports exhaustive matching with `.exhaustive()`.\n- It supports deep selection with the `select()` function.\n- Its type inference works on deeper patterns and is well tested.\n",
    "licenseText": "MIT License\n\nCopyright (c) 2021 Gabriel Vergnaud\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/ts-pattern/-/ts-pattern-3.3.5.tgz#9a4bde1d44f9afe7e82409820f68790232c2544c",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/ts-pattern/-/ts-pattern-3.3.5.tgz",
    "hash": "9a4bde1d44f9afe7e82409820f68790232c2544c",
    "integrity": "sha512-LD+wFR/RNckk1DrKV0LTH4KIT9wRqnnOjtEf77ovhKcVi8gf83Uf6U7OdywEua6KD9SbHadUdfolayfIUiPxzw==",
    "registry": "npm",
    "packageName": "ts-pattern",
    "cacheIntegrity": "sha512-LD+wFR/RNckk1DrKV0LTH4KIT9wRqnnOjtEf77ovhKcVi8gf83Uf6U7OdywEua6KD9SbHadUdfolayfIUiPxzw== sha1-mkveHUT5r+foJAmCD2h5AjLCVEw="
  },
  "registry": "npm",
  "hash": "9a4bde1d44f9afe7e82409820f68790232c2544c"
}