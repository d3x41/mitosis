{
  "manifest": {
    "module": "./esm/mod.js",
    "main": "./script/mod.js",
    "name": "code-block-writer",
    "version": "12.0.0",
    "description": "A simple code writer that assists with formatting and visualizing blocks of code.",
    "repository": {
      "type": "git",
      "url": "git+https://github.com/dsherret/code-block-writer.git"
    },
    "keywords": [
      "code generation",
      "typescript",
      "writer",
      "printer"
    ],
    "author": {
      "name": "David Sherret"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/dsherret/code-block-writer/issues"
    },
    "homepage": "https://github.com/dsherret/code-block-writer#readme",
    "exports": {
      ".": {
        "import": "./esm/mod.js",
        "require": "./script/mod.js"
      }
    },
    "scripts": {
      "test": "node test_runner.js"
    },
    "devDependencies": {
      "@types/node": "^18.11.9",
      "chalk": "^4.1.2",
      "@types/chai": "4.3",
      "chai": "4.3.7",
      "@deno/shim-deno": "~0.13.0"
    },
    "_registry": "npm",
    "_loc": "/home/user/.cache/yarn/v6/npm-code-block-writer-12.0.0-4dd58946eb4234105aff7f0035977b2afdc2a770-integrity/node_modules/code-block-writer/package.json",
    "readmeFilename": "README.md",
    "readme": "# code-block-writer\n\n[![npm version](https://badge.fury.io/js/code-block-writer.svg)](https://badge.fury.io/js/code-block-writer)\n[![CI](https://github.com/dsherret/code-block-writer/workflows/CI/badge.svg)](https://github.com/dsherret/code-block-writer/actions?query=workflow%3ACI)\n[![deno doc](https://doc.deno.land/badge.svg)](https://doc.deno.land/https/deno.land/x/code_block_writer/mod.ts)\n[![stable](http://badges.github.io/stability-badges/dist/stable.svg)](http://github.com/badges/stability-badges)\n\nCode writer for JavaScript and TypeScript code.\n\nWith Deno:\n\n```ts\nimport CodeBlockWriter from \"https://deno.land/x/code_block_writer/mod.ts\";\n```\n\nOr with Node:\n\n```\nnpm install --save code-block-writer\n```\n\n## Example\n\n<!-- dprint-ignore -->\n\n```typescript\nimport CodeBlockWriter from \"https://deno.land/x/code_block_writer/mod.ts\";\n\nconst writer = new CodeBlockWriter({\n  // optional options\n  newLine: \"\\r\\n\",         // default: \"\\n\"\n  indentNumberOfSpaces: 2, // default: 4\n  useTabs: false,          // default: false\n  useSingleQuote: true     // default: false\n});\n\nwriter.write(\"class MyClass extends OtherClass\").block(() => {\n  writer.writeLine(`@MyDecorator(1, 2)`);\n  writer.write(`myMethod(myParam: any)`).block(() => {\n    writer.write(\"return this.post(\").quote(\"myArgument\").write(\");\");\n  });\n});\n\nconsole.log(writer.toString());\n```\n\nOutputs (using \"\\r\\n\" for newlines):\n\n<!-- dprint-ignore -->\n\n```js\nclass MyClass extends OtherClass {\n  @MyDecorator(1, 2)\n  myMethod(myParam: any) {\n    return this.post('myArgument');\n  }\n}\n```\n\n## Methods\n\n- `block(block?: () => void)` - Indents all the code written within and surrounds it in braces.\n- `inlineBlock(block?: () => void)` - Same as block, but doesn't add a space before the first brace and doesn't add a newline at the end.\n- `getLength()` - Get the current number of characters.\n- `writeLine(text: string)` - Writes some text and adds a newline.\n- `newLine()` - Writes a newline.\n- `newLineIfLastNot()` - Writes a newline if what was written last wasn't a newline.\n- `blankLine()` - Writes a blank line. Does not allow consecutive blank lines.\n- `blankLineIfLastNot()` - Writes a blank line if what was written last wasn't a blank line.\n- `quote()` - Writes a quote character.\n- `quote(text: string)` - Writes text surrounded in quotes.\n- `indent(times?: number)` - Indents the current line. Optionally indents multiple times when providing a number.\n- `indent(block?: () => void)` - Indents a block of code.\n- `space(times?: number)` - Writes a space. Optionally writes multiple spaces when providing a number.\n- `spaceIfLastNot()` - Writes a space if the last was not a space.\n- `tab(times?: number)` - Writes a tab. Optionally writes multiple tabs when providing a number.\n- `tabIfLastNot()` - Writes a tab if the last was not a tab.\n- `write(text: string)` - Writes some text.\n- `conditionalNewLine(condition: boolean)` - Writes a newline if the condition is matched.\n- `conditionalBlankLine(condition: boolean)` - Writes a blank line if the condition is matched.\n- `conditionalWrite(condition: boolean, text: string)` - Writes if the condition is matched.\n- `conditionalWrite(condition: boolean, textFunc: () => string)` - Writes if the condition is matched.\n- `conditionalWriteLine(condition: boolean, text: string)` - Writes some text and adds a newline if the condition is matched.\n- `conditionalWriteLine(condition: boolean, textFunc: () => string)` - Writes some text and adds a newline if the condition is matched.\n- `setIndentationLevel(indentationLevel: number)` - Sets the current indentation level.\n- `setIndentationLevel(whitespaceText: string)` - Sets the current indentation level based on the provided whitespace text.\n- `withIndentationLevel(indentationLevel: number, action: () => void)` - Sets the indentation level within the provided action.\n- `withIndentationLevel(whitespaceText: string, action: () => void)` - Sets the indentation level based on the provided whitespace text within the action.\n- `getIndentationLevel()` - Gets the current indentation level.\n- `queueIndentationLevel(indentationLevel: number)` - Queues an indentation level to be used once a new line is written.\n- `queueIndentationLevel(whitespaceText: string)` - Queues an indentation level to be used once a new line is written based on the provided whitespace text.\n- `hangingIndent(action: () => void)` - Writes the code within the action with hanging indentation.\n- `hangingIndentUnlessBlock(action: () => void)` - Writes the code within the action with hanging indentation unless a block is written going from the first line to the second.\n- `closeComment()` - Writes text to exit a comment if in a comment.\n- `unsafeInsert(pos: number, text: string)` - Inserts text into the writer. This will not update the writer's state. Read more in its jsdoc.\n- `isInComment()` - Gets if the writer is currently in a comment.\n- `isAtStartOfFirstLineOfBlock()` - Gets if the writer is currently at the start of the first line of the text, block, or indentation block.\n- `isOnFirstLineOfBlock()` - Gets if the writer is currently on the first line of the text, block, or indentation block.\n- `isInString()` - Gets if the writer is currently in a string.\n- `isLastNewLine()` - Gets if the writer last wrote a newline.\n- `isLastBlankLine()` - Gets if the writer last wrote a blank line.\n- `isLastSpace()` - Gets if the writer last wrote a space.\n- `isLastTab()` - Gets if the writer last wrote a tab.\n- `getLastChar()` - Gets the last character written.\n- `endsWith(text: string)` - Gets if the writer ends with the provided text.\n- `iterateLastChars<T>(action: (char: string, index: number) => T | undefined): T | undefined` - Iterates over the writer's characters in reverse order, stopping once a non-null or undefined value is returned and returns that value.\n- `iterateLastCharCodes<T>(action: (charCode: number, index: number) => T | undefined): T | undefined` - A slightly faster version of `iterateLastChars` that doesn't allocate a string per character.\n- `getOptions()` - Gets the writer options.\n- `toString()` - Gets the string.\n\n## Other Features\n\n- Does not indent within strings.\n- Escapes newlines within double and single quotes created with `.quote(text)`.\n\n## C# Version\n\nSee [CodeBlockWriterSharp](https://github.com/dsherret/CodeBlockWriterSharp).\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2015-2022 David Sherret\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/code-block-writer/-/code-block-writer-12.0.0.tgz#4dd58946eb4234105aff7f0035977b2afdc2a770",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/code-block-writer/-/code-block-writer-12.0.0.tgz",
    "hash": "4dd58946eb4234105aff7f0035977b2afdc2a770",
    "integrity": "sha512-q4dMFMlXtKR3XNBHyMHt/3pwYNA69EDk00lloMOaaUMKPUXBw6lpXtbu3MMVG6/uOihGnRDOlkyqsONEUj60+w==",
    "registry": "npm",
    "packageName": "code-block-writer",
    "cacheIntegrity": "sha512-q4dMFMlXtKR3XNBHyMHt/3pwYNA69EDk00lloMOaaUMKPUXBw6lpXtbu3MMVG6/uOihGnRDOlkyqsONEUj60+w== sha1-TdWJRutCNBBa/38ANZd7Kv3Cp3A="
  },
  "registry": "npm",
  "hash": "4dd58946eb4234105aff7f0035977b2afdc2a770"
}