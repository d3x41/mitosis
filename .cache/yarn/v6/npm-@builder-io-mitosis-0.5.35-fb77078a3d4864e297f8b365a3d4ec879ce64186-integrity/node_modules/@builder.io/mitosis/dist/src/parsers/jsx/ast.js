"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.jsonToAst = void 0;
const babel = __importStar(require("@babel/core"));
const { types } = babel;
const arrayToAst = (array) => types.arrayExpression(array.map(exports.jsonToAst));
const jsonToAst = (json) => {
    if (types.isNode(json)) {
        if (types.isJSXText(json)) {
            return types.stringLiteral(json.value);
        }
        return json;
    }
    switch (typeof json) {
        case 'undefined':
            return types.identifier('undefined');
        case 'string':
            return types.stringLiteral(json);
        case 'number':
            return types.numericLiteral(json);
        case 'boolean':
            return types.booleanLiteral(json);
        case 'object':
            if (!json) {
                return types.nullLiteral();
            }
            if (Array.isArray(json)) {
                return arrayToAst(json);
            }
            return jsonObjectToAst(json);
    }
};
exports.jsonToAst = jsonToAst;
const jsonObjectToAst = (json) => {
    if (!json) {
        // TO-DO: This looks concerning...
        return json;
    }
    const properties = [];
    for (const key in json) {
        const value = json[key];
        if (value === undefined) {
            continue;
        }
        const keyAst = types.stringLiteral(key);
        const valueAst = (0, exports.jsonToAst)(value);
        properties.push(types.objectProperty(keyAst, valueAst));
    }
    const newNode = types.objectExpression(properties);
    return newNode;
};
