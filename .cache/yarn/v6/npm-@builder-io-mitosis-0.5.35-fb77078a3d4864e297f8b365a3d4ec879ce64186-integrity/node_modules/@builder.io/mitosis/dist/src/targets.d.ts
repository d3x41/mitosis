export declare const builder: (options?: import("./generators/builder/types").ToBuilderOptions) => ({ component }: import(".").TranspilerArgs) => import("@builder.io/sdk").BuilderContent;
export declare const targets: {
    readonly alpine: import(".").TranspilerGenerator<import("./generators/alpine/types").ToAlpineOptions>;
    readonly angular: import(".").TranspilerGenerator<import("./generators/angular/types").ToAngularOptions>;
    readonly customElement: import(".").TranspilerGenerator<import("./generators/html/types").ToHtmlOptions>;
    readonly html: import(".").TranspilerGenerator<import("./generators/html/types").ToHtmlOptions>;
    readonly mitosis: import(".").TranspilerGenerator<Partial<import("./generators/mitosis/types").ToMitosisOptions>>;
    readonly liquid: import(".").TranspilerGenerator<import("./generators/liquid/types").ToLiquidOptions>;
    readonly react: import(".").TranspilerGenerator<Partial<import("./generators/react").ToReactOptions>>;
    readonly reactNative: import(".").TranspilerGenerator<Partial<import("./generators/react-native/types").ToReactNativeOptions>>;
    readonly solid: import(".").TranspilerGenerator<Partial<import("./generators/solid/types").ToSolidOptions>>;
    readonly svelte: import(".").TranspilerGenerator<import("./generators/svelte/types").ToSvelteOptions>;
    readonly swift: import(".").TranspilerGenerator<import("./generators/swift/types").ToSwiftOptions>;
    readonly template: import(".").TranspilerGenerator<import("./generators/template/types").ToTemplateOptions>;
    readonly webcomponent: import(".").TranspilerGenerator<import("./generators/html/types").ToHtmlOptions>;
    readonly vue: import(".").TranspilerGenerator<Partial<import("./generators/vue").ToVueOptions>>;
    readonly stencil: import(".").TranspilerGenerator<import("./generators/stencil/types").ToStencilOptions>;
    readonly qwik: import(".").TranspilerGenerator<import("./generators/qwik/types").ToQwikOptions>;
    readonly marko: import(".").TranspilerGenerator<import("./generators/marko/types").ToMarkoOptions>;
    readonly preact: import(".").TranspilerGenerator<Partial<import("./generators/react").ToReactOptions>>;
    readonly lit: import(".").TranspilerGenerator<import("./generators/lit/types").ToLitOptions>;
    readonly rsc: import(".").TranspilerGenerator<Partial<import("./generators/react").ToReactOptions>>;
    readonly taro: import(".").TranspilerGenerator<Partial<import("./generators/react").ToReactOptions>>;
};
export type Targets = keyof typeof targets;
