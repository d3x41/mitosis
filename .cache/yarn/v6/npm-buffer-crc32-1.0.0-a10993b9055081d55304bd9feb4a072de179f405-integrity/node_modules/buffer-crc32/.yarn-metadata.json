{
  "manifest": {
    "author": {
      "name": "Brian J. Brennan",
      "email": "brianloveswords@gmail.com"
    },
    "name": "buffer-crc32",
    "description": "A pure javascript CRC32 algorithm that plays nice with binary data",
    "version": "1.0.0",
    "licenses": [
      {
        "type": "MIT",
        "url": "https://github.com/brianloveswords/buffer-crc32/raw/master/LICENSE"
      }
    ],
    "contributors": [
      {
        "name": "Vladimir Kuznetsov"
      }
    ],
    "homepage": "https://github.com/brianloveswords/buffer-crc32",
    "repository": {
      "type": "git",
      "url": "git://github.com/brianloveswords/buffer-crc32.git"
    },
    "scripts": {
      "test": "tap tests/*.test.js --reporter classic",
      "build": "npx unbuild@2.0.0 && npx cpy-cli index.d.ts dist --rename=index.d.cts && npx cpy-cli index.d.ts dist --rename=index.d.mts",
      "prepublishOnly": "npm run build",
      "format": "prettier --write --log-level warn \"**/*.{json,md,js}\""
    },
    "dependencies": {},
    "devDependencies": {
      "prettier": "^3.2.4",
      "tap": "~11.1.5"
    },
    "optionalDependencies": {},
    "engines": {
      "node": ">=8.0.0"
    },
    "license": "MIT",
    "type": "commonjs",
    "exports": {
      ".": {
        "import": "./dist/index.mjs",
        "require": "./dist/index.cjs"
      }
    },
    "main": "./dist/index.cjs",
    "types": "./index.d.ts",
    "files": [
      "dist",
      "index.d.ts",
      "LICENSE",
      "README.md"
    ],
    "_registry": "npm",
    "_loc": "/home/user/.cache/yarn/v6/npm-buffer-crc32-1.0.0-a10993b9055081d55304bd9feb4a072de179f405-integrity/node_modules/buffer-crc32/package.json",
    "readmeFilename": "README.md",
    "readme": "# buffer-crc32\n\n[![NPM Version](https://img.shields.io/npm/v/buffer-crc32.svg)](https://npmjs.org/package/buffer-crc32)\n[![Build Status](https://github.com/brianloveswords/buffer-crc32/actions/workflows/ci.yml/badge.svg)](https://github.com/brianloveswords/buffer-crc32/actions/workflows/ci.yml)\n\ncrc32 that works with binary data and fancy character sets, outputs\nbuffer, signed or unsigned data and has tests.\n\nDerived from the sample CRC implementation in the PNG specification: http://www.w3.org/TR/PNG/#D-CRCAppendix\n\nThis package requires Node 8+ to work.\n\n# install\n\n```\nnpm install buffer-crc32\n```\n\n# example\n\n```js\nconst crc32 = require('buffer-crc32');\n// works with buffers\nconst buf = Buffer([0x00, 0x73, 0x75, 0x70, 0x20, 0x62, 0x72, 0x6f, 0x00]);\ncrc32(buf); // -> <Buffer 94 5a ab 4a>\n\n// has convenience methods for getting signed or unsigned ints\ncrc32.signed(buf); // -> -1805997238\ncrc32.unsigned(buf); // -> 2488970058\n\n// will cast to buffer if given a string, so you can\n// directly use foreign characters safely\ncrc32('自動販売機'); // -> <Buffer cb 03 1a c5>\n\n// and works in append mode too\nconst partialCrc = crc32('hey');\nconst partialCrc = crc32(' ', partialCrc);\nconst partialCrc = crc32('sup', partialCrc);\nconst partialCrc = crc32(' ', partialCrc);\nconst finalCrc = crc32('bros', partialCrc); // -> <Buffer 47 fa 55 70>\n```\n\n# tests\n\nThis was tested against the output of zlib's crc32 method. You can run\nthe tests with`npm test` (requires tap)\n\n# see also\n\nhttps://github.com/alexgorbatchev/node-crc, `crc.buffer.crc32` also\nsupports buffer inputs and return unsigned ints (thanks @tjholowaychuk).\n\n# license\n\nMIT/X11\n",
    "licenseText": "The MIT License\n\nCopyright (c) 2013-2024 Brian J. Brennan\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\nSoftware, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\nINCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR\nPURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE\nFOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/buffer-crc32/-/buffer-crc32-1.0.0.tgz#a10993b9055081d55304bd9feb4a072de179f405",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/buffer-crc32/-/buffer-crc32-1.0.0.tgz",
    "hash": "a10993b9055081d55304bd9feb4a072de179f405",
    "integrity": "sha512-Db1SbgBS/fg/392AblrMJk97KggmvYhr4pB5ZIMTWtaivCPMWLkmb7m21cJvpvgK+J3nsU2CmmixNBZx4vFj/w==",
    "registry": "npm",
    "packageName": "buffer-crc32",
    "cacheIntegrity": "sha512-Db1SbgBS/fg/392AblrMJk97KggmvYhr4pB5ZIMTWtaivCPMWLkmb7m21cJvpvgK+J3nsU2CmmixNBZx4vFj/w== sha1-oQmTuQVQgdVTBL2f60oHLeF59AU="
  },
  "registry": "npm",
  "hash": "a10993b9055081d55304bd9feb4a072de179f405"
}