import { ToStencilOptions } from '../../../generators/stencil/types';
import { MitosisComponent, MitosisState } from '../../../types/mitosis-component';
import { MitosisNode } from '../../../types/mitosis-node';
export declare const isEvent: (key: string) => boolean;
export type ProcessBindingOptions = {
    events: string[];
};
export declare const processBinding: (code: string, { events }: ProcessBindingOptions) => string;
export declare const getTagName: (name: string, { prefix }: ToStencilOptions) => string;
export declare const getPropsAsCode: (props: string[], defaultProps?: MitosisState | undefined, propsTypeRef?: string) => string;
/**
 * Check for root element if it needs a wrapping <Host>
 * @param children
 */
export declare const needsWrap: (children: MitosisNode[]) => boolean;
/**
 * Dynamically creates all imports from `@stencil/core`
 * @param wrap
 * @param events
 * @param props
 * @param dataString
 */
export declare const getStencilCoreImportsAsString: (wrap: boolean, events: string[], props: string[], dataString: string) => string;
export declare const getImports: (json: MitosisComponent, options: ToStencilOptions, childComponents: string[]) => string;
