"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getImports = exports.getStencilCoreImportsAsString = exports.needsWrap = exports.getPropsAsCode = exports.getTagName = exports.processBinding = exports.isEvent = void 0;
const dash_case_1 = require("../../../helpers/dash-case");
const event_handlers_1 = require("../../../helpers/event-handlers");
const render_imports_1 = require("../../../helpers/render-imports");
const strip_state_and_props_refs_1 = require("../../../helpers/strip-state-and-props-refs");
const isEvent = (key) => (0, event_handlers_1.checkIsEvent)(key);
exports.isEvent = isEvent;
/**
 * We need to "emit" events those can be on multiple places, so we do it as post step
 */
const appendEmits = (str, events) => {
    let code = str;
    if (events.length) {
        for (const event of events) {
            code = code.replaceAll(`props.${event}(`, `props.${event}.emit(`);
        }
    }
    return code;
};
const processBinding = (code, { events }) => {
    return (0, strip_state_and_props_refs_1.stripStateAndPropsRefs)(appendEmits(code, events), { replaceWith: 'this.' });
};
exports.processBinding = processBinding;
const getTagName = (name, { prefix }) => {
    const dashName = (0, dash_case_1.dashCase)(name);
    if (prefix) {
        const dashPrefix = prefix.endsWith('-') ? prefix : `${prefix}-`;
        if (!dashName.startsWith(dashPrefix)) {
            return `${dashPrefix}${dashName}`;
        }
    }
    return dashName;
};
exports.getTagName = getTagName;
const getPropsAsCode = (props, defaultProps, propsTypeRef) => {
    return props
        .map((item) => {
        var _a;
        const defaultProp = defaultProps ? (_a = defaultProps[item]) === null || _a === void 0 ? void 0 : _a.code : undefined;
        const defaultPropString = defaultProp ? ` = ${defaultProp}` : '';
        if ((0, exports.isEvent)(item)) {
            return `@Event() ${item}: any${defaultPropString}`;
        }
        const type = propsTypeRef &&
            propsTypeRef !== 'any' &&
            propsTypeRef !== 'unknown' &&
            propsTypeRef !== 'never'
            ? `${propsTypeRef}["${item}"]`
            : 'any';
        return `@Prop() ${item}: ${type}${defaultPropString}`;
    })
        .join(';\n');
};
exports.getPropsAsCode = getPropsAsCode;
/**
 * Check for root element if it needs a wrapping <Host>
 * @param children
 */
const needsWrap = (children) => {
    if (children.length !== 1) {
        return true;
    }
    else if (children.length === 1) {
        const firstChild = children.at(0);
        if ((firstChild === null || firstChild === void 0 ? void 0 : firstChild.name) === 'Show' || (firstChild === null || firstChild === void 0 ? void 0 : firstChild.name) === 'For') {
            return true;
        }
    }
    return false;
};
exports.needsWrap = needsWrap;
/**
 * Dynamically creates all imports from `@stencil/core`
 * @param wrap
 * @param events
 * @param props
 * @param dataString
 */
const getStencilCoreImportsAsString = (wrap, events, props, dataString) => {
    const stencilCoreImports = {
        Component: true,
        h: true,
        Fragment: true,
        Host: wrap,
        Event: events.length > 0,
        Prop: props.length > 0,
        State: dataString.length > 0,
    };
    return Object.entries(stencilCoreImports)
        .map(([key, bool]) => (bool ? key : ''))
        .filter((key) => !!key)
        .join(', ');
};
exports.getStencilCoreImportsAsString = getStencilCoreImportsAsString;
const getImports = (json, options, childComponents) => {
    return (0, render_imports_1.renderPreComponent)({
        explicitImportFileExtension: options.explicitImportFileExtension,
        component: json,
        target: 'stencil',
        importMapper: (_, theImport, importedValues) => {
            const childImport = importedValues.defaultImport;
            if (childImport && childComponents.includes(childImport)) {
                return `import {${childImport}} from '${theImport.path}';`;
            }
            return undefined;
        },
    });
};
exports.getImports = getImports;
